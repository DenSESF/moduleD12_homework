"""
Django settings for SimpleLogging project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'makeerror',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'SimpleLogging.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'SimpleLogging.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters':{
        'time_lvl_msg': {
            'format': '%(asctime)s %(levelname)s %(message)s',
            # 'style': '%',
            # 'format': '{asctime} {levelname} {message}',
            # 'style': '{',
        },
        'time_lvl_msg_path': {
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s',
            # 'style': '%',
            # 'format': '{asctime}s {levelname} {message} {pathname}',
            # 'style': '{',
        },
        'time_lvl_msg_path_exc': {
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s %(exc_info)s',
            # 'style': '%',
            # 'format': '{asctime} {levelname} {message} {pathname} {exc_info}',
            # 'style': '{',
        },
        'time_lvl_module_msg': {
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s',
            # 'style': '%',
            # 'format': '{asctime} {levelname} {module} {message}',
            # 'style': '{',
        },
        'time_lvl_module_msg_path_exc': {
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s %(pathname)s %(exc_info)s',
            # 'style': '%',
            # 'format': '{asctime} {levelname} {module} {message} {pathname} {exc_info}',
            # 'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        }
    },
    'handlers': {
        'console_debug': {
            'level': 'DEBUG',
            'filters': ['require_debug_true',],
            'class': 'logging.StreamHandler',
            'formatter': 'time_lvl_msg',
        },
        'console_warning': {
            'level': 'WARNING',
            'filters': ['require_debug_true',],
            'class': 'logging.StreamHandler',
            'formatter': 'time_lvl_msg_path',
        },
        'console_error': {
            'level': 'ERROR',
            'filters': ['require_debug_true',],
            'class': 'logging.StreamHandler',
            'formatter': 'time_lvl_msg_path_exc',
        },
        'file_general': {
            'level': 'INFO',
            'filters': ['require_debug_false',],
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'general.log',
            'formatter': 'time_lvl_module_msg',
        },
        'file_errors': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'errors.log',
            'formatter': 'time_lvl_msg_path_exc',
        },
        'file_security': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'security.log',
            'formatter': 'time_lvl_module_msg',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false',],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'time_lvl_msg_path',
            # 'include_html': True,
            # 'email_backend': 'django.core.mail.backends.console.EmailBackend',
        },
    },
    'loggers': {
        'django': {
            'handlers': [
                'console_debug',
                'console_warning',
                'console_error',
                'file_general'
            ],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['mail_admins', 'file_errors',],
            # 'handlers': ['file_errors',],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['mail_admins', 'file_errors',],
            # 'handlers': ['file_errors',],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template': {
            'handlers': ['file_errors',],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db_backends': {
            'handlers': ['file_errors',],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['file_security',],
            'level': 'INFO',
            'propagate': False,
        },
    },
}


# адрес сервера почты
EMAIL_HOST = config('EMAIL_HOST')
# порт smtp
EMAIL_PORT = 465
# ваше имя пользователя и пароль
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
# Используем ssl
EMAIL_USE_SSL = True
# адрес почты отправителя
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER + config('EMAIL_DOMAIN')

# это будет у нас вместо аргумента FROM в массовой рассылке
SERVER_EMAIL = config('SERVER_EMAIL')

# список всех админов в формате ('имя', 'их почта')
ADMINS = config(
    'ADMINS', cast=lambda v: [tuple(s.split(',')) for s in v.split('_')]
)
